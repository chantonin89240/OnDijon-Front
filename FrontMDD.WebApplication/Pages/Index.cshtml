@page
@model IndexModel
@using System.Globalization
@{
    ViewData["Title"] = "Accueil";
    var mapCenter = ViewData["MapCenter"] as string[];
    var mapZoom = ViewData["MapZoom"] as int?;
}

<div class="row">
    <h1>Abris</h1>
    <div class="col-7">        
        <button id="refreshButton" class="btn btn-primary mb-2" onclick="refreshMap()">Refresh</button>
        <div id="map" style="height: 500px;"></div>
    </div>
    <div class="col-5">
        <h1>Statistique</h1>
        <div id="container"></div>
        <br>
        <div>
            <p>sélectionner un abris ainsi qu'une date de début et de fin :</p>
            <form method="post">
                <select id="listeAbris" name="SelectedAbri">
                    @if(Model.Abris != null)
                    {
                        @foreach (var item in Model.Abris)
                        {
                            <option value="@item.RecordId">@item.Nom</option>
                        }
                    }
                    
                </select>

                <br />
                <label for="DateStart">Date de début : </label>
                <input type="datetime-local" id="DateStart"
                       name="DateStart">

                <br />
                <label for="DateEnd">Date de fin : </label>
                <input type="datetime-local" id="DateEnd"
                       name="DateEnd">
                
                <br />
                <button type="submit" class="btn btn-success">Valider</button>
            </form>   
            
                <div class="result">
                    @if(Model.HistorySearch != null){
                    @foreach (var libelle in Model.HistorySearch)
                    {
                        <p>@libelle</p>
                    }
                }
                </div>         
        </div>
    </div>
</div>


@section scripts {
    <script src="https://cdn.jsdelivr.net/npm/leaflet@1.7.1/dist/leaflet.js"></script>
    <script>
        let map = null;
      
        function refreshMap() {
            location.reload()
        }

        function initializeMap() {

            // Supprimer l'instance précédente de la carte, s'il en existe une
            if (map !== null) {
                map.remove();
            }

            map = L.map('map').setView([47.32665, 5.04497], 14);

            L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
                maxZoom: 19,
                attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
            }).addTo(map);



        @if (Model.Abris != null && Model.Abris.Count > 0)
        {
            foreach (var abri in Model.Abris)
            {
                <text>
                        L.marker([@abri.GeoPointLat.ToString(CultureInfo.InvariantCulture), @abri.GeoPointLon.ToString(CultureInfo.InvariantCulture)])
                            .addTo(map)
                            .bindPopup("@abri.Nom<br/> Places : " + @abri.NbPlaces);
                </text>
            }
        }
                            }

        // Initialize the map on page load
        document.addEventListener('DOMContentLoaded', function () {
            initializeMap();
        });
    </script>

}
