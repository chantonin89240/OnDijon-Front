@page
@model IndexModel
@using System.Globalization
@{
    ViewData["Title"] = "Accueil";
    var mapCenter = ViewData["MapCenter"] as string[];
    var mapZoom = ViewData["MapZoom"] as int?;
}

<div class="container">
    <div class="left-container">
        <h1>Abris</h1>
        <br>
        <div class="map">
            <div id="map" style="height: 500px;"></div>
            <button id="refreshButton" class="btn btn-primary mb-2" onclick="refreshMap()">Refresh</button>

        </div>
    </div>
 
    <div>
        <div class="rigt-container">
            <h1>Statistique</h1>
            <div id="container"></div>
            <br>
            <div id="form">
                <p>Sélectionner un abris ainsi qu'une date de début et de fin :</p>
                <form method="post">
                    <select class="select-input" id="listeAbris" name="SelectedAbri">
                        @if (Model.Abris != null)
                        {
                            @foreach (var item in Model.Abris)
                            {
                                <option value="@item.RecordId">@item.Nom</option>
                            }
                        }

                    </select>

                    <br />
                    <label for="DateStart">Date de début : </label>
                    <input class="date-input" type="datetime-local" id="DateStart"
                           name="DateStart">

                    <br />
                    <label for="DateEnd">Date de fin : </label>
                    <input class="date-input" type="datetime-local" id="DateEnd"
                           name="DateEnd">

                    <br />
                    <button type="submit" onclick="OnGetAsync()" class="btn btn-success">Valider</button>
                </form>

                <div class="result">
                    @if (Model.HistorySearch != null)
                    {
                        @foreach (var libelle in Model.HistorySearch)
                        {
                            <p>@libelle</p>
                        }
                    }
                </div>
            </div>
        </div>  
    </div>
</div>


@section scripts {

    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin="" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>

    <script>
        function refreshMap() {
            location.reload();
            initializeMap();
        }

        let map = null;

        function initializeMap() {
            // Supprimer l'instance précédente de la carte, s'il en existe une
            if (map !== null) {
                map.remove();
            }

            map = L.map('map').setView([47.32665, 5.04497], 14);

            L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
                maxZoom: 19,
                attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
            }).addTo(map);

        @if (Model.Abris != null && Model.Abris.Count > 0)
        {
            foreach (var abri in Model.Abris)
            {

                if (@abri.NbPlaces > 15)
                {
                    <text>
                            L.marker([@abri.GeoPointLat.ToString(CultureInfo.InvariantCulture), @abri.GeoPointLon.ToString(CultureInfo.InvariantCulture)], {
                                icon: L.icon({
                                    iconUrl: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-green.png',
                                    shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.3.1/images/marker-shadow.png',
                                    iconSize: [25, 41],
                                    iconAnchor: [12, 41],
                                    popupAnchor: [1, -34],
                                    shadowSize: [41, 41]
                                })
                            })
                                .addTo(map)
                                .bindPopup("@abri.Nom<br/> Places : " + @abri.NbPlaces + " / @abri.NbPlacesInitial");
                    </text>
                }
                else if (@abri.NbPlaces <= 5)
                {
                    <text>
                            L.marker([@abri.GeoPointLat.ToString(CultureInfo.InvariantCulture), @abri.GeoPointLon.ToString(CultureInfo.InvariantCulture)], {
                                icon: L.icon({
                                    iconUrl: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png',
                                    shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.3.1/images/marker-shadow.png',
                                    iconSize: [25, 41],
                                    iconAnchor: [12, 41],
                                    popupAnchor: [1, -34],
                                    shadowSize: [41, 41]
                                })
                            })
                                .addTo(map)
                                .bindPopup("@abri.Nom<br/> Places : " + @abri.NbPlaces + " / @abri.NbPlacesInitial");
                    </text>
                }
                else
                {

                    <text>
                            L.marker([@abri.GeoPointLat.ToString(CultureInfo.InvariantCulture), @abri.GeoPointLon.ToString(CultureInfo.InvariantCulture)], {
                                icon: L.icon({
                                    iconUrl: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-orange.png',
                                    shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.3.1/images/marker-shadow.png',
                                    iconSize: [25, 41],
                                    iconAnchor: [12, 41],
                                    popupAnchor: [1, -34],
                                    shadowSize: [41, 41]
                                })
                            })
                                .addTo(map)
                                .bindPopup("@abri.Nom<br/> Places : " + @abri.NbPlaces + " / @abri.NbPlacesInitial");
                    </text>
                }

              
            }
        }
                }

        // Initialize the map on page load
        document.addEventListener('DOMContentLoaded', function () {
            initializeMap();
        });
    </script>
}

